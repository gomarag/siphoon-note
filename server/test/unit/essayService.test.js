// 1. getAllEssayListById
// 유저가 작성한 글 카드 목록: 최신 일자 순으로 50개 먼저 조회
// 로그인한 사용자는 본인 페이지에서 작성한 글 목록을 볼 수 있다

//   given: 조회하려는 유저 아이디, 비밀번호 -> (이거 mock으로 넣어야 하는지, 하드코딩으로 값을 주는게 좋을지, 실제 데이터 가져오면 의존성이 높아지는 건가?)
//   when: 주어진 계정 정보가 맞다면, 정보가 일치하지 않는다면
//   then: 해당 유저가 작성한 글 카드 30개의 데이터를 받아온다

// 2. getRandomPublicEssayList
// 전체 유저의 글 중, 공개 설정 되어 있는 랜덤한 글 15개 조회
// 랜딩페이지에서 볼 수 있도록 한다

// 3. getMyTagListById
// 유저가 만든 태그 목록

// 4. getTodaysWord;
// 모든 유저에게 공통으로 서비스가 제공하는 오늘의 글감

// 5. createEssay
// (타이머 동작 시작, 태그 갯수 제한 -> 프론트)
//   given: 유저가 글을 작성, 태그(최대 3개)를 입력한다면 (공개 여부 default: false)
//   when: 글쓰기 저장 요청이 들어온다 (Q. request를 받아서 처리하는 컨트롤러는 유닛테스트에서 확인해야 할까? 이건 통합테스트 아닐지)
//   then: 글 내용, isPublic, tagList는 받아온 입력값을, 유저 아이디, 작성 시간(yy-mm-dd hh:mm:ss), 수정 시간은 서비스에서 자동 생성 후, 기존의 글 목록에 새 글을 추가한다

// 6. updateEssay
// 글 수정: 내용, 태그, isPublic, 수정날짜 등의 속성을 변경 / 글 카드에 호버했을 때 나타나는 휴지통 아이콘을 클릭하면 isDeleted:true로 변경
//   given: 속성을 수정하고자 하는 글이 있음
//   when: 해당 글에서 내용, 태그, isPublic, isDeleted 속성을 변경한다면,
//   then: 수정하려는 글 카드의 내용이 수정되어 글 목록에 반영되어야 한다

// 7. deleteEssay
// given: 사용자 id, 글 고유 id가 주어지고
//     (유저가 휴지통 목록 조회를 위해 Trash 토글 버튼을 누르면 'yymmdd 작성 내용 15글자' 리스트가 보이고 -> 이건 e2e 테스트)
//   when: (유저가 휴지통 목록에서 삭제할 글을 선택하면 '영구 삭제' 알림을 모달로 띄우고) 여기에서 '삭제 확인'을 누르면
//   then: 해당 글을 db에서 삭제하도록 처리한다
